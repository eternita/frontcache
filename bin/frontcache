#!/usr/bin/env bash
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.




FRONTCACHE_SCRIPT="$0"
verbose=false
THIS_OS=`uname -s`

# What version of Java is required to run this version of FRONTCACHE.
JAVA_VER_REQ="8"         # For printing in echo

stop_all=false



# Resolve symlinks to this script
while [ -h "$FRONTCACHE_SCRIPT" ] ; do
  ls=`ls -ld "$FRONTCACHE_SCRIPT"`
  # Drop everything prior to ->
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    FRONTCACHE_SCRIPT="$link"
  else
    FRONTCACHE_SCRIPT=`dirname "$FRONTCACHE_SCRIPT"`/"$link"
  fi
done

FRONTCACHE_TIP=`dirname "$FRONTCACHE_SCRIPT"`/..
FRONTCACHE_TIP=`cd "$FRONTCACHE_TIP"; pwd`
DEFAULT_SERVER_DIR="$FRONTCACHE_TIP/server"



if [ -z "$FRONTCACHE_PID_DIR" ]; then
  FRONTCACHE_PID_DIR="$FRONTCACHE_TIP/bin"
fi

if [ -n "$FRONTCACHE_JAVA_HOME" ]; then
  JAVA="$FRONTCACHE_JAVA_HOME/bin/java"
elif [ -n "$JAVA_HOME" ]; then
  for java in "$JAVA_HOME"/bin/amd64/java "$JAVA_HOME"/bin/java; do
    if [ -x "$java" ]; then
      JAVA="$java"
      break
    fi
  done
  if [ -z "$JAVA" ]; then
    echo >&2 "The currently defined JAVA_HOME ($JAVA_HOME) refers"
    echo >&2 "to a location where Java could not be found.  Aborting."
    echo >&2 "Either fix the JAVA_HOME variable or remove it from the"
    echo >&2 "environment so that the system PATH will be searched."
    exit 1
  fi
else
  JAVA=java
fi

if [ -z "$FRONTCACHE_STOP_WAIT" ]; then
  FRONTCACHE_STOP_WAIT=180
fi
# test that Java exists, is executable and correct version
JAVA_VER=$("$JAVA" -version 2>&1)
if [[ $? -ne 0 ]] ; then
  echo >&2 "Java not found, or an error was encountered when running java."
  echo >&2 "A working Java $JAVA_VER_REQ JRE is required to run FRONTCACHE!"
  echo >&2 "Please install latest version of Java $JAVA_VER_REQ or set JAVA_HOME properly."
  echo >&2 "Command that we tried: '${JAVA} -version', with response:"
  echo >&2 "${JAVA_VER}"
  echo
  echo >&2 "Debug information:"
  echo >&2 "JAVA_HOME: ${JAVA_HOME:-N/A}"
  echo >&2 "Active Path:"
  echo >&2 "${PATH}"
  exit 1
else
  JAVA_VER=$(echo $JAVA_VER | awk -F '"' '/version/ {print $2}')
  if [[ "$JAVA_VER" < "1.$JAVA_VER_REQ" ]] ; then
    echo >&2 "Your current version of Java is too old to run this version of FRONTCACHE"
    echo >&2 "We found version $JAVA_VER, using command '${JAVA}'"
    echo >&2 "Please install latest version of Java $JAVA_VER_REQ or set JAVA_HOME properly."
    echo
    echo >&2 "Debug information:"
    echo >&2 "JAVA_HOME: ${JAVA_HOME:-N/A}"
    echo >&2 "Active Path:"
    echo >&2 "${PATH}"
    exit 1
  fi
fi

# Select HTTP OR HTTPS related configurations
FRONTCACHE_URL_SCHEME=http
FRONTCACHE_JETTY_CONFIG=()
FRONTCACHE_SSL_OPTS=""



function print_usage() {
  CMD="$1"
  ERROR_MSG="$2"
    
  if [ "$ERROR_MSG" != "" ]; then
    echo -e "\nERROR: $ERROR_MSG\n"
  fi
  
  if [ -z "$CMD" ]; then
    echo ""
    echo "Usage: FRONTCACHE COMMAND OPTIONS"
    echo "       where COMMAND is one of: start, stop, restart, status, healthcheck, create, create_core, create_collection, delete, version, zk"
    echo ""
    echo "  Standalone server example (start FRONTCACHE running in the background on port 8984):"
    echo ""
    echo "    ./FRONTCACHE start -p 8984"
    echo ""
    echo "  FRONTCACHECloud example (start FRONTCACHE running in FRONTCACHECloud mode using localhost:2181 to connect to Zookeeper, with 1g max heap size and remote Java debug options enabled):"
    echo ""
    echo "    ./FRONTCACHE start -c -m 1g -z localhost:2181 -a \"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044\""
    echo ""
    echo "Pass -help after any COMMAND to see command-specific usage information,"
    echo "  such as:    ./FRONTCACHE start -help or ./FRONTCACHE stop -help"
    echo ""
  elif [[ "$CMD" == "start" || "$CMD" == "restart" ]]; then
    echo ""
    echo "Usage: FRONTCACHE $CMD [-f] [-c] [-h hostname] [-p port] [-d directory] [-z zkHost] [-m memory] [-e example] [-s FRONTCACHE.FRONTCACHE.home] [-a \"additional-options\"] [-V]"
    echo ""
    echo "  -f            Start FRONTCACHE in foreground; default starts FRONTCACHE in the background"
    echo "                  and sends stdout / stderr to FRONTCACHE-PORT-console.log"
    echo ""
    echo "  -c or -cloud  Start FRONTCACHE in FRONTCACHECloud mode; if -z not supplied, an embedded Zookeeper"
    echo "                  instance is started on FRONTCACHE port+1000, such as 9983 if FRONTCACHE is bound to 8983"
    echo ""
    echo "  -h <host>     Specify the hostname for this FRONTCACHE instance"
    echo ""
    echo "  -p <port>     Specify the port to start the FRONTCACHE HTTP listener on; default is 8983"
    echo "                  The specified port (FRONTCACHE_PORT) will also be used to determine the stop port"
    echo "                  STOP_PORT=(\$FRONTCACHE_PORT-1000) and JMX RMI listen port RMI_PORT=(\$FRONTCACHE_PORT+10000). "
    echo "                  For instance, if you set -p 8985, then the STOP_PORT=7985 and RMI_PORT=18985"
    echo ""
    echo "  -d <dir>      Specify the FRONTCACHE server directory; defaults to server"
    echo ""
    echo "  -z <zkHost>   Zookeeper connection string; only used when running in FRONTCACHECloud mode using -c"
    echo "                   To launch an embedded Zookeeper instance, don't pass this parameter."
    echo ""
    echo "  -m <memory>   Sets the min (-Xms) and max (-Xmx) heap size for the JVM, such as: -m 4g"
    echo "                  results in: -Xms4g -Xmx4g; by default, this script sets the heap size to 512m"
    echo ""
    echo "  -s <dir>      Sets the FRONTCACHE.FRONTCACHE.home system property; FRONTCACHE will create core directories under"
    echo "                  this directory. This allows you to run multiple FRONTCACHE instances on the same host"
    echo "                  while reusing the same server directory set using the -d parameter. If set, the"
    echo "                  specified directory should contain a FRONTCACHE.xml file, unless FRONTCACHE.xml exists in Zookeeper."
    echo "                  This parameter is ignored when running examples (-e), as the FRONTCACHE.FRONTCACHE.home depends"
    echo "                  on which example is run. The default value is server/FRONTCACHE."
    echo ""
    echo "  -e <example>  Name of the example to run; available examples:"
    echo "      cloud:         FRONTCACHECloud example"
    echo "      techproducts:  Comprehensive example illustrating many of FRONTCACHE's core capabilities"
    echo "      dih:           Data Import Handler"
    echo "      schemaless:    Schema-less example"
    echo ""
    echo "  -a            Additional parameters to pass to the JVM when starting FRONTCACHE, such as to setup"
    echo "                  Java debug options. For example, to enable a Java debugger to attach to the FRONTCACHE JVM"
    echo "                  you could pass: -a \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=18983\""
    echo "                  In most cases, you should wrap the additional parameters in double quotes."
    echo ""
    echo "  -noprompt     Don't prompt for input; accept all defaults when running examples that accept user input"
    echo ""
    echo "  -v and -q     Verbose (-v) or quiet (-q) logging. Sets default log level to DEBUG or WARN instead of INFO"
    echo ""
    echo "  -V or -verbose Verbose messages from this script"
    echo ""
  elif [ "$CMD" == "stop" ]; then
    echo ""
    echo "Usage: FRONTCACHE stop [-k key] [-p port] [-V]"
    echo ""
    echo "  -k <key>      Stop key; default is FRONTCACHErocks"
    echo ""
    echo "  -p <port>     Specify the port the FRONTCACHE HTTP listener is bound to"
    echo ""
    echo "  -all          Find and stop all running FRONTCACHE servers on this host"
    echo ""
    echo "  NOTE: To see if any FRONTCACHE servers are running, do: FRONTCACHE status"
    echo ""
  elif [ "$CMD" == "healthcheck" ]; then
    echo ""
    echo "Usage: FRONTCACHE healthcheck [-c collection] [-z zkHost]"
    echo ""
    echo "  -c <collection>  Collection to run healthcheck against."
    echo ""
    echo "  -z <zkHost>      Zookeeper connection string; default is localhost:9983"
    echo ""
  elif [ "$CMD" == "status" ]; then
    echo ""
    echo "Usage: FRONTCACHE status"
    echo ""
    echo "  NOTE: This command will show the status of all running FRONTCACHE servers"
    echo ""
  elif [ "$CMD" == "create" ]; then
    echo ""
    echo "Usage: FRONTCACHE create [-c name] [-d confdir] [-n configName] [-shards #] [-replicationFactor #] [-p port]"
    echo ""
    echo "  Create a core or collection depending on whether FRONTCACHE is running in standalone (core) or FRONTCACHECloud"
    echo "  mode (collection). In other words, this action detects which mode FRONTCACHE is running in, and then takes"
    echo "  the appropriate action (either create_core or create_collection). For detailed usage instructions, do:"
    echo ""
    echo "    bin/FRONTCACHE create_core -help"
    echo ""
    echo "       or"
    echo ""
    echo "    bin/FRONTCACHE create_collection -help"
    echo ""
  elif [ "$CMD" == "delete" ]; then
    echo ""
    echo "Usage: FRONTCACHE delete [-c name] [-deleteConfig true|false] [-p port]"
    echo ""
    echo "  Deletes a core or collection depending on whether FRONTCACHE is running in standalone (core) or FRONTCACHECloud"
    echo "  mode (collection). If you're deleting a collection in FRONTCACHECloud mode, the default behavior is to also"
    echo "  delete the configuration directory from Zookeeper so long as it is not being used by another collection."
    echo "  You can override this behavior by passing -deleteConfig false when running this command."
    echo ""
    echo "  -c <name>               Name of the core / collection to delete"
    echo ""
    echo "  -deleteConfig <boolean> Delete the configuration directory from Zookeeper; default is true"
    echo ""
    echo "  -p <port>               Port of a local FRONTCACHE instance where you want to delete the core/collection"
    echo "                            If not specified, the script will search the local system for a running"
    echo "                            FRONTCACHE instance and will use the port of the first server it finds."
    echo ""
  elif [ "$CMD" == "create_core" ]; then
    echo ""
    echo "Usage: FRONTCACHE create_core [-c core] [-d confdir] [-p port]"
    echo ""
    echo "  -c <core>     Name of core to create"
    echo ""
    echo "  -d <confdir>  Configuration directory to copy when creating the new core, built-in options are:"
    echo ""
    echo "      basic_configs: Minimal FRONTCACHE configuration"
    echo "      data_driven_schema_configs: Managed schema with field-guessing support enabled"
    echo "      sample_techproducts_configs: Example configuration with many optional features enabled to"
    echo "         demonstrate the full power of FRONTCACHE"
    echo ""
    echo "      If not specified, default is: data_driven_schema_configs"
    echo ""
    echo "      Alternatively, you can pass the path to your own configuration directory instead of using"
    echo "      one of the built-in configurations, such as: bin/FRONTCACHE create_core -c mycore -d /tmp/myconfig"
    echo ""
    echo "  -p <port>     Port of a local FRONTCACHE instance where you want to create the new core"
    echo "                  If not specified, the script will search the local system for a running"
    echo "                  FRONTCACHE instance and will use the port of the first server it finds."
    echo ""
  elif [ "$CMD" == "create_collection" ]; then
    echo ""
    echo "Usage: FRONTCACHE create_collection [-c collection] [-d confdir] [-n configName] [-shards #] [-replicationFactor #] [-p port]"
    echo ""
    echo "  -c <collection>         Name of collection to create"
    echo ""
    echo "  -d <confdir>            Configuration directory to copy when creating the new collection, built-in options are:"
    echo ""
    echo "      basic_configs: Minimal FRONTCACHE configuration"
    echo "      data_driven_schema_configs: Managed schema with field-guessing support enabled"
    echo "      sample_techproducts_configs: Example configuration with many optional features enabled to"
    echo "         demonstrate the full power of FRONTCACHE"
    echo ""
    echo "      If not specified, default is: data_driven_schema_configs"
    echo ""
    echo "      Alternatively, you can pass the path to your own configuration directory instead of using"
    echo "      one of the built-in configurations, such as: bin/FRONTCACHE create_collection -c mycoll -d /tmp/myconfig"
    echo ""
    echo "      By default the script will upload the specified confdir directory into Zookeeper using the same"
    echo "      name as the collection (-c) option. Alternatively, if you want to reuse an existing directory"
    echo "      or create a confdir in Zookeeper that can be shared by multiple collections, use the -n option"
    echo ""
    echo "  -n <configName>         Name the configuration directory in Zookeeper; by default, the configuration"
    echo "                            will be uploaded to Zookeeper using the collection name (-c), but if you want"
    echo "                            to use an existing directory or override the name of the configuration in"
    echo "                            Zookeeper, then use the -c option."
    echo ""
    echo "  -shards <#>             Number of shards to split the collection into; default is 1"
    echo ""
    echo "  -replicationFactor <#>  Number of copies of each document in the collection, default is 1 (no replication)"
    echo ""
    echo "  -p <port>               Port of a local FRONTCACHE instance where you want to create the new collection"
    echo "                            If not specified, the script will search the local system for a running"
    echo "                            FRONTCACHE instance and will use the port of the first server it finds."
    echo ""
  elif [ "$CMD" == "zk" ]; then
    print_short_zk_usage ""
    echo "         Be sure to check the FRONTCACHE logs in case of errors."
    echo ""
    echo "             -z zkHost Optional Zookeeper connection string for all commands. If specified it"
    echo "                        overrides the 'ZK_HOST=...'' defined in FRONTCACHE.in.sh."
    echo ""
    echo "         upconfig uploads a configset from the local machine to Zookeeper. (Backcompat: -upconfig)"
    echo ""
    echo "         downconfig downloads a configset from Zookeeper to the local machine. (Backcompat: -downconfig)"
    echo ""
    echo "             -n configName   Name of the configset in Zookeeper that will be the destination of"
    echo "                             'upconfig' and the source for 'downconfig'."
    echo ""
    echo "             -d confdir      The local directory the configuration will be uploaded from for"
    echo "                             'upconfig' or downloaded to for 'downconfig'. If 'confdir' is a child of"
    echo "                             ...FRONTCACHE/server/FRONTCACHE/configsets' then the configs will be copied from/to"
    echo "                             that directory. Otherwise it is interpreted as a simple local path."
    echo ""
    echo "         cp copies files or folders to/from Zookeeper or Zokeeper -> Zookeeper"
    echo "             -r   Recursively copy <src> to <dst>. Command will fail if <src> has children and "
    echo "                        -r is not specified. Optional"
    echo ""
    echo "             <src>, <dest> : [file:][/]path/to/local/file or zk:/path/to/zk/node"
    echo "                             NOTE: <src> and <dest> may both be Zookeeper resources prefixed by 'zk:'"
    echo "             When <src> is a zk resource, <dest> may be '.'"
    echo "             If <dest> ends with '/', then <dest> will be a local folder or parent znode and the last"
    echo "             element of the <src> path will be appended."
    echo ""
    echo "             The 'file:' prefix is stripped, thus 'file:/' specifies an absolute local path and"
    echo "             'file:somewhere' specifies a relative local path. All paths on Zookeeper are absolute"
    echo "             so the slash is required."
    echo ""
    echo "             Zookeeper nodes CAN have data, so moving a single file to a parent znode"
    echo "             will overlay the data on the parent Znode so specifying the trailing slash"
    echo "             is important."
    echo ""
    echo "             Wildcards are not supported"
    echo ""
    echo "         rm deletes files or folders on Zookeeper"
    echo "             -r     Recursively delete if <path> is a directory. Command will fail if <path>"
    echo "                    has children and -r is not specified. Optional"
    echo "             <path> : [zk:]/path/to/zk/node. <path> may not be the root ('/')"
    echo ""
    echo "         mv moves (renames) znodes on Zookeeper"
    echo "             <src>, <dest> : Zookeeper nodes, the 'zk:' prefix is optional."
    echo "             If <dest> ends with '/', then <dest> will be a parent znode"
    echo "             and the last element of the <src> path will be appended."
    echo "             Zookeeper nodes CAN have data, so moving a single file to a parent znode"
    echo "             will overlay the data on the parent Znode so specifying the trailing slash"
    echo "             is important."
    echo ""
    echo "         ls lists the znodes on Zookeeper"
    echo "             -r recursively descends the path listing all znodes. Optional"
    echo "             <path>: The Zookeeper path to use as the root."
    echo ""
    echo "             Only the node names are listed, not data"
    echo ""
  fi
} # end print_usage


# used to show the script is still alive when waiting on work to complete
function spinner() {
  local pid=$1
  local delay=0.5
  local spinstr='|/-\'
  while [ "$(ps aux | awk '{print $2}' | grep -w $pid)" ]; do
      local temp=${spinstr#?}
      printf " [%c]  " "$spinstr"
      local spinstr=$temp${spinstr%"$temp"}
      sleep $delay
      printf "\b\b\b\b\b\b"
  done
  printf "    \b\b\b\b"
}

# given a port, find the pid for a FRONTCACHE process
function FRONTCACHE_pid_by_port() {
  THE_PORT="$1"
  if [ -e "$FRONTCACHE_PID_DIR/FRONTCACHE-$THE_PORT.pid" ]; then
    PID=`cat "$FRONTCACHE_PID_DIR/FRONTCACHE-$THE_PORT.pid"`
    CHECK_PID=`ps auxww | awk '{print $2}' | grep -w $PID | sort -r | tr -d ' '`
    if [ "$CHECK_PID" != "" ]; then
      local FRONTCACHEPID=$PID
    fi
  fi
  echo "$FRONTCACHEPID"
}

# extract the value of the -Djetty.port parameter from a running FRONTCACHE process 
function jetty_port() {
  FRONTCACHE_PID="$1"
  FRONTCACHE_PROC=`ps auxww | grep -w $FRONTCACHE_PID | grep start\.jar | grep jetty.port`
  IFS=' ' read -a proc_args <<< "$FRONTCACHE_PROC"
  for arg in "${proc_args[@]}"
    do
      IFS='=' read -a pair <<< "$arg"
      if [ "${pair[0]}" == "-Djetty.port" ]; then
        local jetty_port="${pair[1]}"
        break
      fi
    done    
  echo "$jetty_port"
} # end jetty_port func

# run a FRONTCACHE command-line tool using the FRONTCACHECLI class; 
# useful for doing cross-platform work from the command-line using Java
function run_tool() {

  "$JAVA"  $AUTHC_OPTS $FRONTCACHE_ZK_CREDS_AND_ACLS -DFRONTCACHE.install.dir="$FRONTCACHE_TIP" \
    -Dlog4j.configuration="file:$DEFAULT_SERVER_DIR/scripts/cloud-scripts/log4j.properties" \
    -classpath "$DEFAULT_SERVER_DIR/FRONTCACHE-webapp/webapp/WEB-INF/lib/*:$DEFAULT_SERVER_DIR/lib/ext/*" \
    org.apache.FRONTCACHE.util.FRONTCACHECLI "$@"

  return $?
} # end run_tool function

# get information about any FRONTCACHE nodes running on this host
function get_info() {
  CODE=4
  # first, see if FRONTCACHE is running
  numFRONTCACHEs=`find "$FRONTCACHE_PID_DIR" -name "FRONTCACHE-*.pid" -type f | wc -l | tr -d ' '`
  if [ "$numFRONTCACHEs" != "0" ]; then
    echo -e "\nFound $numFRONTCACHEs FRONTCACHE nodes: "
    while read PIDF
      do
        ID=`cat "$PIDF"`
        port=`jetty_port "$ID"`
        if [ "$port" != "" ]; then
          echo -e "\nFRONTCACHE process $ID running on port $port"
          run_tool status -FRONTCACHE "$FRONTCACHE_URL_SCHEME://$FRONTCACHE_TOOL_HOST:$port/FRONTCACHE"
          CODE=$?
          echo ""
        else
          echo -e "\nFRONTCACHE process $ID from $PIDF not found."
          CODE=1
        fi
    done < <(find "$FRONTCACHE_PID_DIR" -name "FRONTCACHE-*.pid" -type f)
  else
    # no pid files but check using ps just to be sure
    numFRONTCACHEs=`ps auxww | grep start\.jar | grep FRONTCACHE.FRONTCACHE.home | grep -v grep | wc -l | sed -e 's/^[ \t]*//'`
    if [ "$numFRONTCACHEs" != "0" ]; then
      echo -e "\nFound $numFRONTCACHEs FRONTCACHE nodes: "
      PROCESSES=$(ps auxww | grep start\.jar | grep FRONTCACHE.FRONTCACHE.home | grep -v grep | awk '{print $2}' | sort -r)
      for ID in $PROCESSES
        do
          port=`jetty_port "$ID"`
          if [ "$port" != "" ]; then
            echo ""
            echo "FRONTCACHE process $ID running on port $port"
            run_tool status -FRONTCACHE "$FRONTCACHE_URL_SCHEME://$FRONTCACHE_TOOL_HOST:$port/FRONTCACHE"
            CODE=$?
            echo ""
          fi
      done
    else
      echo -e "\nNo FRONTCACHE nodes are running.\n"
      CODE=3
    fi
  fi

  return $CODE
} # end get_info

# tries to gracefully stop FRONTCACHE using the Jetty 
# stop command and if that fails, then uses kill -9
function stop_FRONTCACHE() {

  DIR="$1"
  FRONTCACHE_PORT="$2"
  STOP_PORT=`expr $FRONTCACHE_PORT - 1000`
  STOP_KEY="$3"
  FRONTCACHE_PID="$4"

  if [ "$FRONTCACHE_PID" != "" ]; then
    echo -e "Sending stop command to FRONTCACHE running on port $FRONTCACHE_PORT ... waiting up to $FRONTCACHE_STOP_WAIT seconds to allow Jetty process $FRONTCACHE_PID to stop gracefully."
    "$JAVA" $FRONTCACHE_SSL_OPTS $AUTHC_OPTS -jar "$DIR/start.jar" "STOP.PORT=$STOP_PORT" "STOP.KEY=$STOP_KEY" --stop || true
      (loops=0
      while true
      do
        CHECK_PID=`ps auxww | awk '{print $2}' | grep -w $FRONTCACHE_PID | sort -r | tr -d ' '`
        if [ "$CHECK_PID" != "" ]; then
          slept=$((loops * 2))
          if [ $slept -lt $FRONTCACHE_STOP_WAIT ]; then
            sleep 2
            loops=$[$loops+1]
          else
            exit # subshell!
          fi
        else
          exit # subshell!
        fi
      done) &
    spinner $!
    rm -f "$FRONTCACHE_PID_DIR/FRONTCACHE-$FRONTCACHE_PORT.pid"
  else
    echo -e "No FRONTCACHE nodes found to stop."
    exit 0
  fi

  CHECK_PID=`ps auxww | awk '{print $2}' | grep -w $FRONTCACHE_PID | sort -r | tr -d ' '`
  if [ "$CHECK_PID" != "" ]; then
    echo -e "FRONTCACHE process $FRONTCACHE_PID is still running; forcefully killing it now."
    kill -9 $FRONTCACHE_PID
    echo "Killed process $FRONTCACHE_PID"
    rm -f "$FRONTCACHE_PID_DIR/FRONTCACHE-$FRONTCACHE_PORT.pid"
    sleep 1
  fi

  CHECK_PID=`ps auxww | awk '{print $2}' | grep -w $FRONTCACHE_PID | sort -r | tr -d ' '`
  if [ "$CHECK_PID" != "" ]; then
    echo "ERROR: Failed to kill previous FRONTCACHE Java process $FRONTCACHE_PID ... script fails."
    exit 1
  fi
} # end stop_FRONTCACHE

if [ $# -eq 1 ]; then
  case $1 in
    -help|-usage|-h|--help)
        print_usage ""
        exit
    ;;
    -info|-i|status)
        get_info
        exit $?
    ;;
    -version|-v|version)
        run_tool version
        exit
    ;;
  esac
fi

if [ $# -gt 0 ]; then
  # if first arg starts with a dash (and it's not -help or -info), 
  # then assume they are starting FRONTCACHE, such as: FRONTCACHE -f
  if [[ $1 == -* ]]; then
    SCRIPT_CMD="start"
  else
    SCRIPT_CMD="$1"
    shift
  fi
else
  # no args - just show usage and exit
  print_usage ""
  exit  
fi

if [ "$SCRIPT_CMD" == "status" ]; then
  # hacky - the script hits this if the user passes additional args with the status command,
  # which is not supported but also not worth complaining about either
  get_info
  exit
fi

# assert tool
if [ "$SCRIPT_CMD" == "assert" ]; then
  run_tool assert $*
  exit $?
fi


# verify the command given is supported
if [ "$SCRIPT_CMD" != "stop" ] && [ "$SCRIPT_CMD" != "start" ] && [ "$SCRIPT_CMD" != "restart" ] && [ "$SCRIPT_CMD" != "status" ] && [ "$SCRIPT_CMD" != "assert" ]; then
  print_usage "" "$SCRIPT_CMD is not a valid command!"
  exit 1
fi

# Run in foreground (default is to run in the background)
FG="false"
FORCE=false
noprompt=false
FRONTCACHE_OPTS=($FRONTCACHE_OPTS)
PASS_TO_RUN_EXAMPLE=

if [ $# -gt 0 ]; then
  while true; do  
    case "$1" in
        -c|-cloud)
            FRONTCACHE_MODE="FRONTCACHEcloud"
            PASS_TO_RUN_EXAMPLE+=" -c"
            shift
        ;;
        -d|-dir)
            if [[ -z "$2" || "${2:0:1}" == "-" ]]; then
              print_usage "$SCRIPT_CMD" "Server directory is required when using the $1 option!"
              exit 1
            fi

            if [[ "$2" == "." || "$2" == "./" || "$2" == ".." || "$2" == "../" ]]; then
              FRONTCACHE_SERVER_DIR="$(pwd)/$2"
            else
              # see if the arg value is relative to the tip vs full path
              if [[ "$2" != /* ]] && [[ -d "$FRONTCACHE_TIP/$2" ]]; then
                FRONTCACHE_SERVER_DIR="$FRONTCACHE_TIP/$2"
              else
                FRONTCACHE_SERVER_DIR="$2"
              fi
            fi
            # resolve it to an absolute path
            FRONTCACHE_SERVER_DIR="$(cd "$FRONTCACHE_SERVER_DIR"; pwd)"
            shift 2
        ;;
        -s|-FRONTCACHE.home)
            if [[ -z "$2" || "${2:0:1}" == "-" ]]; then
              print_usage "$SCRIPT_CMD" "FRONTCACHE home directory is required when using the $1 option!"
              exit 1
            fi

            FRONTCACHE_HOME="$2"
            shift 2
        ;;
        -e|-example)
            if [[ -z "$2" || "${2:0:1}" == "-" ]]; then
              print_usage "$SCRIPT_CMD" "Example name is required when using the $1 option!"
              exit 1
            fi
            EXAMPLE="$2"
            shift 2
        ;;
        -f|-foreground)
            FG="true"
            shift
        ;;
        -h|-host)
            if [[ -z "$2" || "${2:0:1}" == "-" ]]; then
              print_usage "$SCRIPT_CMD" "Hostname is required when using the $1 option!"
              exit 1
            fi
            FRONTCACHE_HOST="$2"
            PASS_TO_RUN_EXAMPLE+=" -h $FRONTCACHE_HOST"
            shift 2
        ;;
        -m|-memory)
            if [[ -z "$2" || "${2:0:1}" == "-" ]]; then
              print_usage "$SCRIPT_CMD" "Memory setting is required when using the $1 option!"
              exit 1
            fi
            FRONTCACHE_HEAP="$2"
            PASS_TO_RUN_EXAMPLE+=" -m $FRONTCACHE_HEAP"
            shift 2
        ;;
        -p|-port)
            if [[ -z "$2" || "${2:0:1}" == "-" ]]; then
              print_usage "$SCRIPT_CMD" "Port number is required when using the $1 option!"
              exit 1
            fi
            FRONTCACHE_PORT="$2"
            PASS_TO_RUN_EXAMPLE+=" -p $FRONTCACHE_PORT"
            shift 2
        ;;
        -z|-zkhost)
            if [[ -z "$2" || "${2:0:1}" == "-" ]]; then
              print_usage "$SCRIPT_CMD" "Zookeeper connection string is required when using the $1 option!"
              exit 1
            fi
            ZK_HOST="$2"
            FRONTCACHE_MODE="FRONTCACHEcloud"
            PASS_TO_RUN_EXAMPLE+=" -z $ZK_HOST"
            shift 2
        ;;
        -a|-addlopts)
            ADDITIONAL_CMD_OPTS="$2"
            PASS_TO_RUN_EXAMPLE+=" -a \"$ADDITIONAL_CMD_OPTS\""
            shift 2
        ;;
        -k|-key)
            STOP_KEY="$2"
            shift 2
        ;;
        -help|-usage)
            print_usage "$SCRIPT_CMD"
            exit 0
        ;;
        -noprompt)
            noprompt=true
            PASS_TO_RUN_EXAMPLE+=" -noprompt"
            shift
        ;;
        -V|-verbose)
            verbose=true
            PASS_TO_RUN_EXAMPLE+=" --verbose"
            shift
        ;;
        -v)
            FRONTCACHE_LOG_LEVEL=DEBUG
            shift
        ;;
        -q)
            FRONTCACHE_LOG_LEVEL=WARN
            shift
        ;;
        -all)
            stop_all=true
            shift
        ;;
        -force)
            FORCE=true
            shift
        ;;
        --)
            shift
            break
        ;;
        *)
            if [ "${1:0:2}" == "-D" ]; then
              # pass thru any opts that begin with -D (java system props)
              FRONTCACHE_OPTS+=("$1")
              PASS_TO_RUN_EXAMPLE+=" $1"
              shift
            else
              if [ "$1" != "" ]; then
                print_usage "$SCRIPT_CMD" "$1 is not supported by this script"
                exit 1
              else
                break # out-of-args, stop looping
              fi
            fi
        ;;
    esac
  done
fi

if [[ $FRONTCACHE_LOG_LEVEL ]] ; then
  FRONTCACHE_LOG_LEVEL_OPT="-DFRONTCACHE.log.level=$FRONTCACHE_LOG_LEVEL"
fi

if [ -z "$FRONTCACHE_SERVER_DIR" ]; then
  FRONTCACHE_SERVER_DIR="$DEFAULT_SERVER_DIR"
fi

if [ ! -e "$FRONTCACHE_SERVER_DIR" ]; then
  echo -e "\nFRONTCACHE server directory $FRONTCACHE_SERVER_DIR not found!\n"
  exit 1
fi

if [[ "$FG" == 'true' && "$EXAMPLE" != "" ]]; then
  FG='false'
  echo -e "\nWARNING: Foreground mode (-f) not supported when running examples.\n"
fi

#
# If the user specified an example to run, invoke the run_example tool (Java app) and exit
# otherwise let this script proceed to process the user request
#
if [ -n "$EXAMPLE" ] && [ "$SCRIPT_CMD" == "start" ]; then
  run_tool run_example -e $EXAMPLE -d "$FRONTCACHE_SERVER_DIR" -urlScheme $FRONTCACHE_URL_SCHEME $PASS_TO_RUN_EXAMPLE
  exit $?
fi

############# start/stop logic below here ################

if $verbose ; then
  echo "Using FRONTCACHE root directory: $FRONTCACHE_TIP"
  echo "Using Java: $JAVA"
  "$JAVA" -version
fi

if [ "$FRONTCACHE_HOST" != "" ]; then
  FRONTCACHE_HOST_ARG=("-Dhost=$FRONTCACHE_HOST")
else
  FRONTCACHE_HOST_ARG=()
fi

if [ -z "$STOP_KEY" ]; then
  STOP_KEY='FRONTCACHErocks'
fi

# stop all if no port specified
if [[ "$SCRIPT_CMD" == "stop" && -z "$FRONTCACHE_PORT" ]]; then
  if $stop_all; then
    none_stopped=true
    find "$FRONTCACHE_PID_DIR" -name "FRONTCACHE-*.pid" -type f | while read PIDF
      do
        NEXT_PID=`cat "$PIDF"`
        port=`jetty_port "$NEXT_PID"`
        if [ "$port" != "" ]; then
          stop_FRONTCACHE "$FRONTCACHE_SERVER_DIR" "$port" "$STOP_KEY" "$NEXT_PID"
          none_stopped=false
        fi
        rm -f "$PIDF"
    done
    # TODO: none_stopped doesn't get reflected across the subshell
    # This can be uncommented once we find a clean way out of it
    # if $none_stopped; then
    #   echo -e "\nNo FRONTCACHE nodes found to stop.\n"
    # fi
  else
    # not stopping all and don't have a port, but if we can find the pid file for the default port 8983, then use that
    none_stopped=true
    numFRONTCACHEs=`find "$FRONTCACHE_PID_DIR" -name "FRONTCACHE-*.pid" -type f | wc -l | tr -d ' '`
    if [ $numFRONTCACHEs -eq 1 ]; then
      # only do this if there is only 1 node running, otherwise they must provide the -p or -all
      PID="$(cat "$(find "$FRONTCACHE_PID_DIR" -name "FRONTCACHE-*.pid" -type f)")"
      CHECK_PID=`ps auxww | awk '{print $2}' | grep -w $PID | sort -r | tr -d ' '`
      if [ "$CHECK_PID" != "" ]; then
        port=`jetty_port "$CHECK_PID"`
        if [ "$port" != "" ]; then
          stop_FRONTCACHE "$FRONTCACHE_SERVER_DIR" "$port" "$STOP_KEY" "$CHECK_PID"
          none_stopped=false
        fi
      fi
    fi

    if $none_stopped; then
      if [ $numFRONTCACHEs -gt 0 ]; then
        echo -e "\nFound $numFRONTCACHEs FRONTCACHE nodes running! Must either specify a port using -p or -all to stop all FRONTCACHE nodes on this host.\n"
      else
        echo -e "\nNo FRONTCACHE nodes found to stop.\n"
      fi
      exit 1
    fi
  fi
  exit
fi

if [ -z "$FRONTCACHE_PORT" ]; then
  FRONTCACHE_PORT=8983
fi

if [ -z "$STOP_PORT" ]; then
  STOP_PORT=`expr $FRONTCACHE_PORT - 1000`
fi

if [ "$SCRIPT_CMD" == "start" ] || [ "$SCRIPT_CMD" == "restart" ] ; then
  if [[ "$(whoami)" == "root" ]] && [[ "$FORCE" == "false" ]] ; then
    echo "WARNING: Starting FRONTCACHE as the root user is a security risk and not considered best practice. Exiting."
    echo "         Please consult the Reference Guide. To override this check, start with argument '-force'"
    exit 1
  fi
fi

if [[ "$SCRIPT_CMD" == "start" ]]; then
  # see if FRONTCACHE is already running
  FRONTCACHE_PID=`FRONTCACHE_pid_by_port "$FRONTCACHE_PORT"`

  if [ -z "$FRONTCACHE_PID" ]; then
    # not found using the pid file ... but use ps to ensure not found
    FRONTCACHE_PID=`ps auxww | grep start\.jar | grep -w $FRONTCACHE_PORT | grep -v grep | awk '{print $2}' | sort -r`
  fi

  if [ "$FRONTCACHE_PID" != "" ]; then
    echo -e "\nPort $FRONTCACHE_PORT is already being used by another process (pid: $FRONTCACHE_PID)\nPlease choose a different port using the -p option.\n"
    exit 1
  fi
else
  # either stop or restart
  # see if FRONTCACHE is already running
  FRONTCACHE_PID=`FRONTCACHE_pid_by_port "$FRONTCACHE_PORT"`
  if [ -z "$FRONTCACHE_PID" ]; then
    # not found using the pid file ... but use ps to ensure not found
    FRONTCACHE_PID=`ps auxww | grep start\.jar | grep -w $FRONTCACHE_PORT | grep -v grep | awk '{print $2}' | sort -r`
  fi
  if [ "$FRONTCACHE_PID" != "" ]; then
    stop_FRONTCACHE "$FRONTCACHE_SERVER_DIR" "$FRONTCACHE_PORT" "$STOP_KEY" "$FRONTCACHE_PID"
  else
    if [ "$SCRIPT_CMD" == "stop" ]; then
      echo -e "No process found for FRONTCACHE node running on port $FRONTCACHE_PORT"
      exit 1
    fi
  fi
fi

if [ -z "$FRONTCACHE_HOME" ]; then
  FRONTCACHE_HOME="$FRONTCACHE_SERVER_DIR/FRONTCACHE"
else
  if [[ $FRONTCACHE_HOME != /* ]] && [[ -d "$FRONTCACHE_SERVER_DIR/$FRONTCACHE_HOME" ]]; then
    FRONTCACHE_HOME="$FRONTCACHE_SERVER_DIR/$FRONTCACHE_HOME"
    FRONTCACHE_PID_DIR="$FRONTCACHE_HOME"
  elif [[ $FRONTCACHE_HOME != /* ]] && [[ -d "`pwd`/$FRONTCACHE_HOME" ]]; then
    FRONTCACHE_HOME="$(pwd)/$FRONTCACHE_HOME"
  fi
fi

# This is quite hacky, but examples rely on a different log4j.properties
# so that we can write logs for examples to $FRONTCACHE_HOME/../logs
if [ -z "$FRONTCACHE_LOGS_DIR" ]; then
  FRONTCACHE_LOGS_DIR="$FRONTCACHE_SERVER_DIR/logs"
fi
EXAMPLE_DIR="$FRONTCACHE_TIP/example"
if [ "${FRONTCACHE_HOME:0:${#EXAMPLE_DIR}}" = "$EXAMPLE_DIR" ]; then
  LOG4J_PROPS="$EXAMPLE_DIR/resources/log4j.properties"
  FRONTCACHE_LOGS_DIR="$FRONTCACHE_HOME/../logs"
fi

LOG4J_CONFIG=()
if [ -n "$LOG4J_PROPS" ]; then
  LOG4J_CONFIG+=("-Dlog4j.configuration=file:$LOG4J_PROPS")
fi

if [ "$SCRIPT_CMD" == "stop" ]; then
  # already stopped, script is done.
  exit 0
fi

# NOTE: If the script gets to here, then it is starting up a FRONTCACHE node.

if [ ! -e "$FRONTCACHE_HOME" ]; then
  echo -e "\nFRONTCACHE home directory $FRONTCACHE_HOME not found!\n"
  exit 1
fi

run_tool utils -s "$DEFAULT_SERVER_DIR" -l "$FRONTCACHE_LOGS_DIR" -remove_old_FRONTCACHE_logs 7 || echo "Failed removing old FRONTCACHE logs"
run_tool utils -s "$DEFAULT_SERVER_DIR" -l "$FRONTCACHE_LOGS_DIR" -archive_gc_logs        || echo "Failed archiving old GC logs"
run_tool utils -s "$DEFAULT_SERVER_DIR" -l "$FRONTCACHE_LOGS_DIR" -archive_console_logs   || echo "Failed archiving old console logs"
run_tool utils -s "$DEFAULT_SERVER_DIR" -l "$FRONTCACHE_LOGS_DIR" -rotate_FRONTCACHE_logs 9     || echo "Failed rotating old FRONTCACHE logs"

java_ver_out=`echo "$("$JAVA" -version 2>&1)"`
JAVA_VERSION=`echo $java_ver_out | grep "java version" | awk '{ print substr($3, 2, length($3)-2); }'`
JAVA_VENDOR="Oracle"


# Establish default opts no env var set (otherwise init to empty)
if [ -z ${GC_LOG_OPTS+x} ]; then
  GC_LOG_OPTS=('-verbose:gc' '-XX:+PrintHeapAtGC' '-XX:+PrintGCDetails' \
    '-XX:+PrintGCDateStamps' '-XX:+PrintGCTimeStamps' '-XX:+PrintTenuringDistribution' \
    '-XX:+PrintGCApplicationStoppedTime')
else
  GC_LOG_OPTS=($GC_LOG_OPTS)
fi

# if verbose gc logging enabled, setup the location of the log file and rotation
if [ "$GC_LOG_OPTS" != "" ]; then
  gc_log_flag="-Xloggc"
  if [ "$JAVA_VENDOR" == "IBM J9" ]; then
    gc_log_flag="-Xverbosegclog"
  fi
  GC_LOG_OPTS+=("$gc_log_flag:$FRONTCACHE_LOGS_DIR/FRONTCACHE_gc.log" -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=9 -XX:GCLogFileSize=20M)
fi

# If ZK_HOST is defined, the assume FRONTCACHECloud mode
if [[ -n "$ZK_HOST" ]]; then
  FRONTCACHE_MODE="FRONTCACHEcloud"
fi

if [ "$FRONTCACHE_MODE" == 'FRONTCACHEcloud' ]; then
  if [ -z "$ZK_CLIENT_TIMEOUT" ]; then
    ZK_CLIENT_TIMEOUT="15000"
  fi
  
  CLOUD_MODE_OPTS=("-DzkClientTimeout=$ZK_CLIENT_TIMEOUT")
  
  if [ "$ZK_HOST" != "" ]; then
    CLOUD_MODE_OPTS+=("-DzkHost=$ZK_HOST")
  else
    if $verbose ; then
      echo "Configuring FRONTCACHECloud to launch an embedded Zookeeper using -DzkRun"
    fi

    CLOUD_MODE_OPTS+=('-DzkRun')
  fi

  # and if collection1 needs to be bootstrapped
  if [ -e "$FRONTCACHE_HOME/collection1/core.properties" ]; then
    CLOUD_MODE_OPTS+=('-Dbootstrap_confdir=./FRONTCACHE/collection1/conf' '-Dcollection.configName=myconf' '-DnumShards=1')
  fi
    
else
  if [ ! -e "$FRONTCACHE_HOME/FRONTCACHE.xml" ]; then
    echo -e "\nFRONTCACHE home directory $FRONTCACHE_HOME must contain a FRONTCACHE.xml file!\n"
    exit 1
  fi
fi

# These are useful for attaching remote profilers like VisualVM/JConsole
if [ "$ENABLE_REMOTE_JMX_OPTS" == "true" ]; then

  if [ -z "$RMI_PORT" ]; then
    RMI_PORT=`expr $FRONTCACHE_PORT + 10000`
    if [ $RMI_PORT -gt 65535 ]; then
      echo -e "\nRMI_PORT is $RMI_PORT, which is invalid!\n"
      exit 1
    fi
  fi

  REMOTE_JMX_OPTS=('-Dcom.sun.management.jmxremote' \
    '-Dcom.sun.management.jmxremote.local.only=false' \
    '-Dcom.sun.management.jmxremote.ssl=false' \
    '-Dcom.sun.management.jmxremote.authenticate=false' \
    "-Dcom.sun.management.jmxremote.port=$RMI_PORT" \
    "-Dcom.sun.management.jmxremote.rmi.port=$RMI_PORT")

  # if the host is set, then set that as the rmi server hostname
  if [ "$FRONTCACHE_HOST" != "" ]; then
    REMOTE_JMX_OPTS+=("-Djava.rmi.server.hostname=$FRONTCACHE_HOST")
  fi
else
  REMOTE_JMX_OPTS=()
fi

JAVA_MEM_OPTS=()
if [ -z "$FRONTCACHE_HEAP" ] && [ -n "$FRONTCACHE_JAVA_MEM" ]; then
  JAVA_MEM_OPTS=($FRONTCACHE_JAVA_MEM)
else
  FRONTCACHE_HEAP="${FRONTCACHE_HEAP:-512m}"
  JAVA_MEM_OPTS=("-Xms$FRONTCACHE_HEAP" "-Xmx$FRONTCACHE_HEAP")
fi

# Pick default for Java thread stack size, and then add to FRONTCACHE_OPTS
if [ -z ${FRONTCACHE_JAVA_STACK_SIZE+x} ]; then
  FRONTCACHE_JAVA_STACK_SIZE='-Xss256k'
fi
FRONTCACHE_OPTS+=($FRONTCACHE_JAVA_STACK_SIZE)

if [ -z "$FRONTCACHE_TIMEZONE" ]; then
  FRONTCACHE_TIMEZONE='UTC'
fi

# Launches FRONTCACHE in foreground/background depending on parameters
function launch_FRONTCACHE() {

  run_in_foreground="$1"
  stop_port="$STOP_PORT"
  
  FRONTCACHE_ADDL_ARGS="$2"

  # define default GC_TUNE
  if [ -z ${GC_TUNE+x} ]; then
      GC_TUNE=('-XX:NewRatio=3' \
        '-XX:SurvivorRatio=4' \
        '-XX:TargetSurvivorRatio=90' \
        '-XX:MaxTenuringThreshold=8' \
        '-XX:+UseConcMarkSweepGC' \
        '-XX:+UseParNewGC' \
        '-XX:ConcGCThreads=4' '-XX:ParallelGCThreads=4' \
        '-XX:+CMSScavengeBeforeRemark' \
        '-XX:PretenureSizeThreshold=64m' \
        '-XX:+UseCMSInitiatingOccupancyOnly' \
        '-XX:CMSInitiatingOccupancyFraction=50' \
        '-XX:CMSMaxAbortablePrecleanTime=6000' \
        '-XX:+CMSParallelRemarkEnabled' \
        '-XX:+ParallelRefProcEnabled' \
        '-XX:-OmitStackTraceInFastThrow')
  else
    GC_TUNE=($GC_TUNE)
  fi


  # If SSL-related system props are set, add them to FRONTCACHE_OPTS
  if [ -n "$FRONTCACHE_SSL_OPTS" ]; then
    # If using SSL and FRONTCACHE.jetty.https.port not set explicitly, use the jetty.port
    SSL_PORT_PROP="-DFRONTCACHE.jetty.https.port=$FRONTCACHE_PORT"
    FRONTCACHE_OPTS+=($FRONTCACHE_SSL_OPTS "$SSL_PORT_PROP")
  fi

  # If authentication system props are set, add them to FRONTCACHE_OPTS
  if [ -n "$AUTHC_OPTS" ]; then
    FRONTCACHE_OPTS+=($AUTHC_OPTS)
  fi

  if $verbose ; then
    echo -e "\nStarting FRONTCACHE using the following settings:"
    echo -e "    JAVA            = $JAVA"
    echo -e "    FRONTCACHE_SERVER_DIR = $FRONTCACHE_SERVER_DIR"
    echo -e "    FRONTCACHE_HOME       = $FRONTCACHE_HOME"
    echo -e "    FRONTCACHE_HOST       = $FRONTCACHE_HOST"
    echo -e "    FRONTCACHE_PORT       = $FRONTCACHE_PORT"
    echo -e "    STOP_PORT       = $STOP_PORT"
    echo -e "    JAVA_MEM_OPTS   = ${JAVA_MEM_OPTS[@]}"
    echo -e "    GC_TUNE         = ${GC_TUNE[@]}"
    echo -e "    GC_LOG_OPTS     = ${GC_LOG_OPTS[@]}"
    echo -e "    FRONTCACHE_TIMEZONE   = $FRONTCACHE_TIMEZONE"

    if [ "$FRONTCACHE_MODE" == "FRONTCACHEcloud" ]; then
      echo -e "    CLOUD_MODE_OPTS = ${CLOUD_MODE_OPTS[@]}"
    fi

    if [ "$FRONTCACHE_OPTS" != "" ]; then
      echo -e "    FRONTCACHE_OPTS       = ${FRONTCACHE_OPTS[@]}"
    fi

    if [ "$FRONTCACHE_ADDL_ARGS" != "" ]; then
      echo -e "    FRONTCACHE_ADDL_ARGS  = $FRONTCACHE_ADDL_ARGS"
    fi

    if [ "$ENABLE_REMOTE_JMX_OPTS" == "true" ]; then
      echo -e "    RMI_PORT        = $RMI_PORT"
      echo -e "    REMOTE_JMX_OPTS = ${REMOTE_JMX_OPTS[@]}"
    fi

    if [ "$FRONTCACHE_LOG_LEVEL" != "" ]; then
      echo -e "    FRONTCACHE_LOG_LEVEL  = $FRONTCACHE_LOG_LEVEL"
    fi

    echo -e "\n"
  fi
    
  # need to launch FRONTCACHE from the server dir
  cd "$FRONTCACHE_SERVER_DIR"
  
  if [ ! -e "$FRONTCACHE_SERVER_DIR/start.jar" ]; then
    echo -e "\nERROR: start.jar file not found in $FRONTCACHE_SERVER_DIR!\nPlease check your -d parameter to set the correct FRONTCACHE server directory.\n"
    exit 1
  fi

  FRONTCACHE_START_OPTS=('-server' "${JAVA_MEM_OPTS[@]}" "${GC_TUNE[@]}" "${GC_LOG_OPTS[@]}" \
    "${REMOTE_JMX_OPTS[@]}" "${CLOUD_MODE_OPTS[@]}" $FRONTCACHE_LOG_LEVEL_OPT -DFRONTCACHE.log.dir="$FRONTCACHE_LOGS_DIR" \
    "-Djetty.port=$FRONTCACHE_PORT" "-DSTOP.PORT=$stop_port" "-DSTOP.KEY=$STOP_KEY" \
    "${FRONTCACHE_HOST_ARG[@]}" "-Duser.timezone=$FRONTCACHE_TIMEZONE" \
    "-Djetty.home=$FRONTCACHE_SERVER_DIR" "-DFRONTCACHE.FRONTCACHE.home=$FRONTCACHE_HOME" "-DFRONTCACHE.install.dir=$FRONTCACHE_TIP" \
    "${LOG4J_CONFIG[@]}" "${FRONTCACHE_OPTS[@]}")

  if [ "$FRONTCACHE_MODE" == "FRONTCACHEcloud" ]; then
    IN_CLOUD_MODE=" in FRONTCACHECloud mode"
  fi

  mkdir -p "$FRONTCACHE_LOGS_DIR" 2>/dev/null
  if [ $? -ne 0 ]; then
    echo -e "\nERROR: Logs directory $FRONTCACHE_LOGS_DIR could not be created. Exiting"
    exit 1
  fi
  if [ ! -w "$FRONTCACHE_LOGS_DIR" ]; then
    echo -e "\nERROR: Logs directory $FRONTCACHE_LOGS_DIR is not writable. Exiting"
    exit 1
  fi
  case "$FRONTCACHE_LOGS_DIR" in
    contexts|etc|lib|modules|resources|scripts|FRONTCACHE|FRONTCACHE-webapp)
      echo -e "\nERROR: Logs directory $FRONTCACHE_LOGS_DIR is invalid. Reserved for the system. Exiting"
      exit 1
      ;;
  esac

  if [ "$run_in_foreground" == "true" ]; then
    exec "$JAVA" "${FRONTCACHE_START_OPTS[@]}" $FRONTCACHE_ADDL_ARGS -jar start.jar "${FRONTCACHE_JETTY_CONFIG[@]}"
  else
    # run FRONTCACHE in the background
    nohup "$JAVA" "${FRONTCACHE_START_OPTS[@]}" $FRONTCACHE_ADDL_ARGS -DFRONTCACHE.log.muteconsole \
	"-XX:OnOutOfMemoryError=$FRONTCACHE_TIP/bin/oom_FRONTCACHE.sh $FRONTCACHE_PORT $FRONTCACHE_LOGS_DIR" \
        -jar start.jar "${FRONTCACHE_JETTY_CONFIG[@]}" \
	1>"$FRONTCACHE_LOGS_DIR/FRONTCACHE-$FRONTCACHE_PORT-console.log" 2>&1 & echo $! > "$FRONTCACHE_PID_DIR/FRONTCACHE-$FRONTCACHE_PORT.pid"

    # no lsof on cygwin though
    if hash lsof 2>/dev/null ; then  # hash returns true if lsof is on the path
      echo -n "Waiting up to $FRONTCACHE_STOP_WAIT seconds to see FRONTCACHE running on port $FRONTCACHE_PORT"
      # Launch in a subshell to show the spinner
      (loops=0
      while true
      do
        running=`lsof -PniTCP:$FRONTCACHE_PORT -sTCP:LISTEN`
        if [ -z "$running" ]; then
	  slept=$((loops * 2))
          if [ $slept -lt $FRONTCACHE_STOP_WAIT ]; then
            sleep 2
            loops=$[$loops+1]
          else
            echo -e "Still not seeing FRONTCACHE listening on $FRONTCACHE_PORT after $FRONTCACHE_STOP_WAIT seconds!"
            tail -30 "$FRONTCACHE_LOGS_DIR/FRONTCACHE.log"
            exit # subshell!
          fi
        else
          FRONTCACHE_PID=`ps auxww | grep start\.jar | grep -w $FRONTCACHE_PORT | grep -v grep | awk '{print $2}' | sort -r`
          echo -e "\nStarted FRONTCACHE server on port $FRONTCACHE_PORT (pid=$FRONTCACHE_PID). Happy searching!\n"
          exit # subshell!
        fi
      done) &
      spinner $!
    else
      echo -e "NOTE: Please install lsof as this script needs it to determine if FRONTCACHE is listening on port $FRONTCACHE_PORT."
      sleep 10
      FRONTCACHE_PID=`ps auxww | grep start\.jar | grep -w $FRONTCACHE_PORT | grep -v grep | awk '{print $2}' | sort -r`
      echo -e "\nStarted FRONTCACHE server on port $FRONTCACHE_PORT (pid=$FRONTCACHE_PID). Happy searching!\n"
      return;
    fi
  fi
}

launch_FRONTCACHE "$FG" "$ADDITIONAL_CMD_OPTS"

exit $?
