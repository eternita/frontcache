
import org.akhikhl.gretty.AppBeforeIntegrationTestTask

class ExecWait extends DefaultTask {
	String command
	String ready
	String directory
 
	@TaskAction
	def spawnProcess() {
 
		ProcessBuilder builder = new ProcessBuilder(command.split(' '))
		builder.redirectErrorStream(true)
		builder.directory(new File(directory))
		Process process = builder.start()
 
		InputStream stdout = process.getInputStream()
		BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))
 
		def line
		while ((line = reader.readLine()) != null) {
			println line
			if (line.contains(ready)) {
				println "$command is ready"
				break;
			}
		}
	}
}


buildscript {
	repositories {
	  jcenter()
	}
  
	dependencies {
	  classpath 'org.akhikhl.gretty:gretty:+' // use gretty to run Jetty9 (servlet 3.1.0 container)
	  classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
	}
  }
  
subprojects {
    apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'jacoco'
	apply plugin: 'com.github.kt3k.coveralls'
	
    version = '0.9.3-SNAPSHOT'
    group = 'org.frontcache'
	
//	upload binaries to Maven repository.  $mavenLocalRepo (defined in gradle.properties)
//  mavenLocalRepo = file:///Users/spa/.m2/repository
//
//	uploadArchives {
//		repositories {
//			mavenDeployer {
//				repository(url: mavenLocalRepo)
//			}
//		}
//	}
	
	configurations {
		provided
	}
	 
	sourceSets {
		main {
			compileClasspath += configurations.provided
			test.compileClasspath += configurations.provided
			test.runtimeClasspath += configurations.provided
		}
	}

	jacoco.toolVersion = '0.7.7.201606060606'
		
    dependencies {
		testCompile 'junit:junit:4.12'
    }
	
    repositories {
        mavenLocal()
        mavenCentral()
    }
    
    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
	tasks.withType(Test) {
		testLogging {
			showStandardStreams = true
			exceptionFormat 'full'
		}
	}
	
	test {
		reports.html.destination = file("$reports.html.destination/unit")
		reports.junitXml.destination = file("$reports.junitXml.destination/unit")
		
		if (System.getProperty('DEBUG', 'false') == 'true') {
			jvmArgs '-Xdebug',
				'-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8001'
		}
        jacoco {
            append = true
            destinationFile = file("$buildDir/jacoco/test.exec")
            classDumpFile = file("$buildDir/classes/test")
        }
	}
	
	check.dependsOn jacocoTestReport
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}



project(':frontcache-core') {
	
    dependencies {
        provided        'javax.servlet:javax.servlet-api:3.1.0'
		provided        'javax.servlet.jsp:jsp-api:2.0'
		
		compile 		'com.fasterxml.jackson.core:jackson-databind:2.1.2'
		compile         'com.fasterxml.jackson.core:jackson-annotations:2.1.2'		
        compile         'org.apache.httpcomponents:httpclient:4.5.1'
        compile         'commons-io:commons-io:2.4'
        compile         'ch.qos.logback:logback-classic:1.1.3'
		compile         'com.netflix.hystrix:hystrix-core:1.5.2'
		compile         'com.netflix.hystrix:hystrix-metrics-event-stream:1.5.2'
        compile         'net.sf.ehcache:ehcache:2.10.0'
        compile         'com.google.code.gson:gson:2.5'
        compile         'org.apache.lucene:lucene-core:6.2.0'
        compile         'org.apache.lucene:lucene-queryparser:6.2.0'
		
        testCompile     'junit:junit:4.12'
        testCompile     'com.squareup.okhttp:okhttp:2.5.0'
    }
	
//	build.dependsOn uploadArchives	
}


project(':frontcache-agent') {
	dependencies {
        compile         'org.apache.httpcomponents:httpclient:4.5.1'
	}
}



project(':frontcache-server') {
	apply plugin: 'war'
	apply plugin: 'org.akhikhl.gretty'
	
	// gretty for Frontcache (standalone)
	gretty {
		httpPort = 9080
		httpsPort = 9443
		httpsEnabled = true
		servicePort = 9081
		statusPort = 9082
		contextPath = '/'
		servletContainer = 'jetty9' // jetty9 or tomcat7 or tomcat8
		jvmArgs = ['-Dfrontcache.home=' + projectDir +'/FRONTCACHE_HOME', '-Dlogback.configurationFile=' + projectDir +'/FRONTCACHE_HOME/conf/fc-logback.xml']
//		jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8003', '-Dfrontcache.home=' + projectDir +'/FRONTCACHE_HOME','-Dlogback.configurationFile=' + projectDir +'/FRONTCACHE_HOME/conf/fc-logback.xml']
	}

	farm {
		webapp ':frontcache-server'
		webapp ':frontcache-console'
	  }
	
	dependencies {
		compile project(':frontcache-core')
	}
}


project(':frontcache-console') {
	apply plugin: 'war'
	apply plugin: 'org.akhikhl.gretty'
	
	ext {
		springVersion = '4.2.6.RELEASE'
	}
	
	gretty {
		httpPort = 7080
		httpsPort = 7443
		httpsEnabled = true
		servicePort = 7081
		statusPort = 7082
//		jvmArgs = ['-Dorg.frontcache.console.config=' + projectDir +'/config/frontcache-console.properties']
	}
	
	dependencies {
		compile project(':frontcache-core')
		compile "org.springframework:spring-context:${springVersion}"
		compile "org.springframework:spring-webmvc:${springVersion}"
		compile 'jstl:jstl:1.2'
        provided 'javax.servlet:javax.servlet-api:3.1.0'
	}
}



// tests -> FC standalone (localhost:9080) -> FC webfilter (localhost:8080) -> web app (localhost:8080)
// FC standalone is run in standalone Jetty in org.frontcache.tests.FrontcacheStandaloneServer
// FC webfilter is run in Gretty
// test & FC webfilter & web app   are share the same JVM process 
project(':frontcache-tests') {
	apply plugin: 'war'
	apply plugin: 'org.akhikhl.gretty'

		
	// gretty for FC filter and web app
	gretty {
		httpPort = 8080
		servicePort = 8081
		statusPort = 8082
  		contextPath = '/'
		servletContainer = 'jetty9' // jetty9 or tomcat7 or tomcat8
		integrationTestTask = 'integrationTest' // existing gradle task (it will be surrounded with start/stop)
		jvmArgs = ['-Dfrontcache.home=' + projectDir +'/FRONTCACHE_HOME_FILTER', '-Dlogback.configurationFile=' + projectDir +'/FRONTCACHE_HOME_FILTER/conf/fc-logback.xml']
//		jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8003', '-Dfrontcache.home=' + projectDir +'/FRONTCACHE_HOME_FILTER','-Dlogback.configurationFile=' + projectDir +'/FRONTCACHE_HOME_FILTER/conf/fc-logback.xml']
	}
	
	sourceSets {
		integrationTest {
			java.srcDir file('src/test-integration/java')
			resources.srcDir file('src/test-integration/resources')
			compileClasspath = sourceSets.main.output + configurations.testRuntime
			runtimeClasspath = output + compileClasspath
		}
	}

	task integrationTest(type: Test) {
		description = 'Runs the integration tests.'
		group = 'verification'
		maxParallelForks = 1 // run all tests sequentially (due to cache cleanup befor every test)
		forkEvery = 1 // run all tests sequentially (due to cache cleanup befor every test)
		testClassesDir = sourceSets.integrationTest.output.classesDir
		classpath = sourceSets.integrationTest.runtimeClasspath
		reports.html.destination = file("$reports.html.destination/integration")
		reports.junitXml.destination = file("$reports.junitXml.destination/integration")
		
		//		jvmArgs = ['-Dfrontcache-tests.home=' + projectDir, '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8003']
		jvmArgs '-Dfrontcache-tests.home=' + projectDir
		//		'-Dlogback.configurationFile=' !! logs (because of same process) here: projectDir +'/FRONTCACHE_HOME_FILTER/conf/fc-logback.xml'

	}

	// for FC standalone
	task standaloneFrontcacheJetty(type: JavaExec) {
		main = 'org.frontcache.tests.FrontcacheStandaloneServer'
		classpath = sourceSets.main.runtimeClasspath
		systemProperty 'frontcache.standalone.frontcache.web.dir', '' + projectDir + '/src/test-integration/webapp'
		systemProperty 'frontcache.standalone.frontcache.port', '9080'
		systemProperty 'frontcache.home', '' + projectDir + '/FRONTCACHE_HOME_STANDALONE'
	}
	
	task startStandaloneFrontcache(type: ExecWait) {
		command './gradlew clean :frontcache-tests:standaloneFrontcacheJetty'
		ready 'Frontcache Standalone Server has been started successfully ...'
		directory '.'
	}
		
	task stopStandaloneFrontcacheByPort << {
		def ports = [9080]
	 
		ports.each { port ->
			def cmd = "lsof -Fp -i :$port"
			def process = cmd.execute()
			process.in.eachLine { line ->
				def killProcess = "kill -9 ${ line.substring(1) }".execute()
				killProcess.waitFor()
			}
		}
	}
	
	task end2endTests {
		dependsOn integrationTest
	}
	
	dependencies {
		compile project(':frontcache-core')
		compile project(':frontcache-agent')		
		
		compile 'net.sourceforge.htmlunit:htmlunit:2.18'
		compile 'org.eclipse.jetty:jetty-server:9.3.6.v20151106'
		compile 'org.eclipse.jetty:jetty-webapp:9.3.6.v20151106'
		compile 'jstl:jstl:1.2'
		
		provided 'junit:junit:4.12' 		
	}
		
}

