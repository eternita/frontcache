---
- name: register ansible_ssh_pipelining
  tags: util
  set_fact:
    util_fact_ssh_pipelining: "{{ true if ansible_ssh_pipelining|default(false) else false }}"

# This workaround disables requiretty for sudo if pipelining is requested.
# We need to do this early to make the rest work with pipelining.
# Eventually this will not be necessary anymore. There is a workaround in
# ansible devel: https://github.com/ansible/ansible/pull/13200
- name: Disable requiretty in SUDO
  tags: util
  become: true
  when: "{{ util_fact_ssh_pipelining }}"
  vars:
    ansible_ssh_pipelining: false
  lineinfile:
    state: absent
    dest: /etc/sudoers
    regexp: 'Defaults[ \t]+requiretty'

- name: Assert supported platform
  tags: util
  assert:
    that:
      - ansible_os_family in util_supported_os_families
      - ansible_distribution in util_supported_os_distributions


- name: Include --check mode detection
  tags: util
  include: ../../silpion.lib/tasks/checkmodedetection.yml


- name: Include OS specific configuration
  tags: util
  include: ../../silpion.lib/tasks/os-specific-vars.yml


- name: Assert role configuration
  tags: util
  assert:
    that:
      - util_package_state in util_package_states
      - util_init_system|default(util_init_system_default) in util_init_systems


- name: Include service management configuration
  tags: util
  include_vars: vars/service/{{ util_init_system|default(util_init_system_default) }}.yml


# The role does not allow to re-configure whether EPEL repository is
# managed once it has been applied once.
# This protects the role in various edge cases to function properly.
- name: Assert EPEL configuration
  tags: util
  when: ansible_local.util.epel.enable is defined
  assert:
    that:
      - util_epel_enable|bool == ansible_local.util.epel.enable|bool


# Manage package installation of Ansible dependencies
#   ansible_os_family == 'Debian'
- name: Update apt package cache
  tags: util
  become: true
  when: ansible_os_family == 'Debian'
  apt:
    update_cache: true
    cache_valid_time: "{{ util_apt_cache_valid_time }}"


#   We need to install Python SELinux bindings to perform filesystem operations
#     with Ansible if SELinux is enabled
- name: Register SELinux state
  tags: util
  become: true
  always_run: true
  ignore_errors: true
  failed_when: false
  changed_when: false
  register: util_registered_selinux_state
  command: selinuxenabled

- name: Install Python SELinux bindings
  tags: util
  become: true
  when: util_registered_selinux_state.rc == 0
  with_items: "{{ util_package_list_selinux }}"
  action: "{{ ansible_pkg_mgr }}"
  args:
    state: "{{ util_package_state }}"
    name: "{{ item }}"


## The point of this is to avoid changed events from the 'Install EPEL' task
## when the role gets executed in --check mode.
## This work-arounds the yum module always generating a changed event
## when used with an url as source in --check mode
## Bugreport: https://github.com/ansible/ansible-modules-core/issues/2392
- name: Register installed repos
  tags: util
  become: true
  changed_when: false
  when:
    - ansible_os_family == 'RedHat'
    - ansible_local.util.epel.enable is undefined or ansible_local.util.epel.enable != true
  always_run: true
  register: util_registered_installed_repos
  command: yum repolist

- name: Install EPEL
  tags: util
  become: true
  when:
    - util_epel_enable
    - ansible_os_family == 'RedHat'
    - ansible_local.util.epel.enable is undefined
    - "'epel' not in util_registered_installed_repos.stdout"
  yum:
    state: "{{ util_package_state }}"
    name: "{{ util_epel_baseurl }}/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
    disable_gpg_check: true

- name: Install Ansible module dependencies from EPEL
  tags: util
  become: true
  with_items: "{{ util_package_list_ansible_deps_epel }}"
  when:
    - ansible_os_family == 'RedHat'
    - util_epel_enable
    - not lib_fact_check_mode
  action: "{{ ansible_pkg_mgr }}"
  args:
    state: "{{ util_package_state }}"
    name: "{{ item }}"

- name: Install Ansible module dependencies
  tags: util
  become: true
  with_flattened:
    - "{{ util_package_list_ansible_deps }}"
    - "{{ util_package_list_custom }}"
  action: "{{ ansible_pkg_mgr }}"
  args:
    state: "{{ util_package_state }}"
    name: "{{ item }}"


# Add some facts for other roles to use
- name: Include local facts tasks
  tags: util
  include: ../../silpion.lib/tasks/localfacts.yml
  vars:
    namespace: util
